@use "sass:math";
@use "sass:meta";
@use "../variables" as *; // Document

// Configuration
$rfs-base-font-size: 1.25rem !default;
$rfs-font-size-unit: rem !default;
$rfs-breakpoint: 1200px !default;
$rfs-rem-value: 16 !default;
$rfs-factor: 10 !default;

@if meta.type-of($rfs-factor) != "number" or $rfs-factor <= 1 {
  @error "`#{$rfs-factor}` is not a valid $rfs-factor, it must be greater than 1.";
}

// Cache $rfs-base-font-size unit
$rfs-base-font-size-unit: math.unit($rfs-base-font-size);

// Remove px-unit from $rfs-base-font-size for calculations
@if $rfs-base-font-size-unit == "px" {
  $rfs-base-font-size: math.div(
    $rfs-base-font-size,
    ($rfs-base-font-size * 0 + 1)
  );
} @else if $rfs-base-font-size-unit == "rem" {
  $rfs-base-font-size: math.div(
    $rfs-base-font-size,
    ($rfs-base-font-size * 0 + math.div(1, $rfs-rem-value))
  );
}

// Responsive font-size mixin
@mixin rfs($fs, $important: false) {
  $fs-unit: if(meta.type-of($fs) == "number", math.unit($fs), false);
  $rfs-suffix: if($important, " !important", "");

  @if not
    $fs-unit or
    $fs-unit !=
    "" and
    $fs-unit !=
    "px" and
    $fs-unit !=
    "rem" or
    $fs ==
    0
  {
    font-size: #{$fs}#{$rfs-suffix};
  } @else {
    $rfs-static: null;
    $rfs-fluid: null;

    @if $fs-unit == "px" {
      $fs: math.div($fs, ($fs * 0 + 1));
    } @else if $fs-unit == "rem" {
      $fs: math.div($fs, ($fs * 0 + math.div(1, $rfs-rem-value)));
    }

    @if $rfs-font-size-unit == rem {
      $rfs-static: #{math.div($fs, $rfs-rem-value)}rem#{$rfs-suffix};
    } @else if $rfs-font-size-unit == px {
      $rfs-static: #{$fs}px#{$rfs-suffix};
    } @else {
      @error "`#{$rfs-font-size-unit}` is not a valid unit for $rfs-font-size-unit. Use `px` or `rem`.";
    }

    @if $fs > $rfs-base-font-size and $enable-responsive-font-sizes {
      $min-width: null;
      $fs-min: $rfs-base-font-size +
        (math.div($fs - $rfs-base-font-size, $rfs-factor));
      $fs-diff: $fs - $fs-min;

      $min-width: if(
        $rfs-font-size-unit == rem,
        #{$fs-min / $rfs-rem-value}rem,
        #{$fs-min}px
      );
      $variable-width: #{$fs-diff * 100 / $rfs-breakpoint}vw;

      $rfs-fluid: calc(#{$min-width} + #{$variable-width});
    }

    @if $rfs-fluid == null {
      font-size: $rfs-static;
    } @else {
      @media (max-width: #{$rfs-breakpoint}) {
        font-size: $rfs-fluid;
      }
    }
  }
}

// The font-size & responsive-font-size mixin uses RFS to rescale font sizes
@mixin font-size($fs, $important: false) {
  @include rfs($fs, $important);
}

@mixin responsive-font-size($fs, $important: false) {
  @include rfs($fs, $important);
}
